@page "/rom"
@using MediatR
@using U2Pa.Lib
@using U2Pa.Lib.IC
@using U2pa.Electron.Link
@using U2pa.Electron.Link.Handlers.Rom

<PageTitle>Rom</PageTitle>

<p>Selected file: @SelectedFile</p>
<p role="status">Address count: @guiState.CurrentProgress</p>
<p role="status">State: @guiState.CurrentProgressBarShout</p>
<p>
  <select class="form-control selectpicker" @bind="SelectedRomType">
    <option>--select--</option>
    @foreach (var item in RomTypes)
    {
      <option value="@item">@item</option>
    }
  </select>
</p>
<p>
  <progress value="@guiState.CurrentProgress" max="@guiState.MaxProgress"></progress>
</p>

<button class="btn btn-primary" @onclick="SelectFile">Select file</button>
<button class="btn btn-primary" @onclick="Read">Read</button>
<button class="btn btn-primary" @onclick="Cancel">Cancel</button>

@inject IMediator mediator
@code {
    private CancellationTokenSource tokenSource;
    private GuiState guiState;
    private bool currentlyReading = false;
    private string SelectedFile = "<none>";
    private List<string> RomTypes;
    private string SelectedRomType;

    protected override async void OnInitialized()
    {
        guiState = new GuiState(Tick);
        RomTypes = (await mediator.Send(new GetAllRomTypesQuery(), CancellationToken.None));
    }

    private void Tick(object? _)
    {
        InvokeAsync(StateHasChanged);
    }

    private async void SelectFile()
    {   
        var files = (await ElectronNET.API.Electron.Dialog.ShowOpenDialogAsync(
          ElectronNET.API.Electron.WindowManager.BrowserWindows.First(), new ElectronNET.API.Entities.OpenDialogOptions()));

        if(files.Length == 1)
        {
            SelectedFile = files[0];
        }
        Tick(null);
    }

    private async void Read()
    {
        if (currentlyReading)
            return;


        if(SelectedRomType == null || SelectedRomType == "--select--")
        {
            ElectronNET.API.Electron.Dialog.ShowErrorBox("No Rom type selected", "Please select a valid Rom type");
            return;
        }

        currentlyReading = true;

        guiState.Reset();
        var request = new ReadCommand(guiState, SelectedRomType, SelectedFile);
        tokenSource = new CancellationTokenSource();
        await mediator.Send(request, tokenSource.Token);

        Tick(null); 
        currentlyReading = false;
    }

    private async void Cancel()
    {
        tokenSource.Cancel();
    }
}
